/**
 * User Service Layer
 * 
 * This service handles all user-related business logic and data operations.
 * It implements the core functionality for managing user data.
 * 
 * Implementation Approach:
 * 1. Define User interface for type safety
 * 2. Use Prisma for database operations
 * 3. Provide CRUD operations for users
 * 4. Handle data validation and business rules
 * 
 * Technical Decisions:
 * - Using TypeScript interfaces for data structure
 * - Using Prisma for database operations
 * - Implementing singleton pattern for service instance
 * - Auto-generating IDs for new users
 * 
 * Assumptions:
 * 1. User data structure: id, name, salary
 * 2. IDs are auto-generated by the database
 * 3. Data stored in SQLite database
 * 4. No duplicate names allowed
 */

import { User, UserQueryParams } from '../types';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

class UserService {
  // Get all users with filtering, sorting, and page size
  async getUsers(params: UserQueryParams = {}): Promise<{ users: User[], total: number }> {
    // Build where clause for filtering
    const where: any = {};
    if (params.min !== undefined) {
      where.salary = { ...where.salary, gte: params.min };
    }
    if (params.max !== undefined) {
      where.salary = { ...where.salary, lte: params.max };
    }

    // Build orderBy clause for sorting
    const orderBy: any = {};
    if (params.sort === 'NAME') {
      orderBy.name = 'asc';
    } else if (params.sort === 'SALARY') {
      orderBy.salary = 'asc';
    }

    // Get total count for pagination
    const total = await prisma.user.count({ where });

    // Get paginated users
    const users = await prisma.user.findMany({
      where,
      orderBy,
      skip: params.offset || 0,
      take: params.pageSize,
    });

    // Convert Prisma model to our User type
    const formattedUsers: User[] = users.map(user => ({
      id: user.id.toString(),
      name: user.name,
      salary: user.salary
    }));

    return {
      users: formattedUsers,
      total
    };
  }

  // Create a new user
  async createUser(userData: Omit<User, 'id'>): Promise<User> {
    const user = await prisma.user.create({
      data: userData
    });

    return {
      id: user.id.toString(),
      name: user.name,
      salary: user.salary
    };
  }
}

// Export singleton instance for consistent state
export const userService = new UserService(); 